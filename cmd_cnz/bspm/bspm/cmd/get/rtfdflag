#!/bin/bash -u
##
# ------------------------------------------------------------------------
#     Copyright (C) 2014 Ericsson AB. All rights reserved.
# ------------------------------------------------------------------------
##
# Name:
#       rtfdflag
# Description:
#       The "get rtfdflag" sub-command of the bspmngr tool. It can be used to read RtfdStartedFlag
##
# Changelog:
# Fri Feb 21 2014 - Stefano V
#		Code cleanup and optimization
# Fri Feb 07 2014 - Rajeswari P
#		First Version
##

. $BSPMNGR_DIR/$LIB_COMMON_DIR/bspmngr_common.sh

check_debug

function is_verbose(){
	return $OPT_VERBOSE	
}

function get_rtfdflag(){
	
  is_slot $BOARD
  EXIT_CODE=$?
	if [ $EXIT_CODE -ne $TRUE ]; then
		abort "Board name Option not supported"
  fi


  #fetch IP addresses of DMXC
  fetch_dmxc_ip

  #fetch shelf address
  fetch_shelf_address

  #fetch shelf id
  fetch_shelf_id

  local query=$(printf GPR:%02d%02d256 $SHELF_ID $BOARD)	
  $ironsidecmd -a $DMXC_IP_A -p $DMXC_PORT -s "$query" -o $TMP_FILE > /dev/null
  EXIT_CODE=$?
  if [ $EXIT_CODE -ne $TRUE ]; then
      if [ $EXIT_CODE -eq $NC_SESSION_OPEN_FAILED ]; then
      	clean_xml > /dev/null
	$ironsidecmd -a $DMXC_IP_B -p $DMXC_PORT -s "$query" -o $TMP_FILE > /dev/null
      	EXIT_CODE=$?
        if [ $EXIT_CODE -ne $TRUE ]; then
        	abort "reading of rtfd flag failed"
        fi
      fi
    fi  

  if [ -s "$TMP_FILE" ];then
	gpr=$(cat $TMP_FILE )
	rtfdFlag=$(echo $gpr | awk -F. '{print $5}')
	[ -z $rtfdFlag ] && abort  "reading of rtfd flag failed"
	if [ $rtfdFlag -ge 128 ]; then
		#printf "RTFD flag is set. Gprdata is %s\n" $gpr
		printf "RtfdStartedFlag on\n"
	else
		 #printf "RTFD flag is not set. Gprdata is %s\n" $gpr
		 printf "RtfdStartedFlag off\n"
	fi
  else
	printf "reading of rtfd flag failed\n"
  fi
}
function usage(){
	cat $MAN_DIR/get_rtfdflag.man
}

function parse_cmdline(){
	# LONG_OPTIONS is a list of space-separated multi-character options.
	#  The string must be in the form:
	#   Example: 'option1 option2 ... optionN'.
	#  Options that takes an argument must be followed by a colon:
	#   Example: 'option1: option2 ... optionN:'
	#  Options with an optional argument must be followed by a double colon:
	#   Example: 'option1:: option2:: ... optionN'
	local LONG_OPTIONS='help verbose'
	
	[ $# -le 0 ] && usage && abort 'missing parameter'
	/usr/bin/getopt --quiet --quiet-output --longoptions="$LONG_OPTIONS" -- "$@"
	EXIT_CODE=$?
	if [ $EXIT_CODE -ne $TRUE ]; then
		usage
		abort "Command line parameter error"
	fi	
	local ARGS="$@"
	eval set -- "$ARGS"
	
	# Make sure to handle the cases for all the options listed in OPTIONS
	#  and LONG_OPTIONS and to fill up the right script-wide variables.
	while [ $# -gt 0 ]; do		
		case "$1" in
			$(check_board_format $1 && echo $1))
				OPT_BOARD=$TRUE
				BOARD=$1
			;;
                        all-boards)
				 abort "this applies only to one board at a time"
                        ;;
                        all-slots)
				 abort "this applies only to one board at a time"
                        ;;
			--help)
				usage
				exit $TRUE
			;;
			--verbose)				
				OPT_VERBOSE=$TRUE				
			;;			
			--)
				# "end of argument list"
				shift
				break
			;;
			*)
				abort "unrecognized option ($1)"
			;;
		esac
		shift
	done
	[[ $OPT_BOARD -eq $FALSE ]] && abort 'missing parameter'
}

OPT_VERBOSE=$FALSE
OPT_BOARD=$FALSE
OPT_ALL_SLOTS=$FALSE
OPT_ALL_BOARDS=$FALSE
BOARD=''
parse_cmdline $@
get_rtfdflag
exit $?
