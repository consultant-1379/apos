#!/bin/bash -u
##
# ------------------------------------------------------------------------
#     Copyright (C) 2014 Ericsson AB. All rights reserved.
# ------------------------------------------------------------------------
##
# Name:
#       mac
# Description:
#       The "get mac" sub-command of the bspmngr tool.
##
# Changelog:
# Fri Feb 21 2014 - Stefano V
#		Code cleanup and optimization
# Wed Feb 05 2014 - Rajeswari P
#		First Version
####

. $BSPMNGR_DIR/$LIB_COMMON_DIR/bspmngr_common.sh
check_debug

# configuration

function is_verbose(){
	return $OPT_VERBOSE	
}

function usage(){
	cat $MAN_DIR/get_mac.man
}

function get_mac(){
	if [[ $OPT_ALL_BOARDS -eq $TRUE || $OPT_ALL_SLOTS -eq $TRUE ]]; then
		clean_xml
		abort "Option not supported"
	else
		is_slot $BOARD
		EXIT_CODE=$?
		if [ $EXIT_CODE -ne $TRUE ]; then
			clean_xml
			abort "Board name specified is not supported"
		fi	 
	fi
	
 	#fetch IP addresses of DMXC
	fetch_dmxc_ip

	#fetch shelf address
	fetch_shelf_address

	#fetch shelf id
	fetch_shelf_id

	query=$(printf BLD:%02d%02dMAC- $SHELF_ID $BOARD )

	$ironsidecmd -a $DMXC_IP_A -p $DMXC_PORT -s "$query" -o $TMP_FILE > /dev/null
	EXIT_CODE=$?
	if [ $EXIT_CODE -ne $TRUE ]; then
		if [ $EXIT_CODE -eq $NC_SESSION_OPEN_FAILED ]; then
			clean_xml > /dev/null
			$ironsidecmd -a $DMXC_IP_B -p $DMXC_PORT -s "$query" -o $TMP_FILE  > /dev/null
			EXIT_CODE=$?
			if [ $EXIT_CODE -ne $TRUE ]; then
				clean_xml 
				abort "Failed to fetch MAC Address"
			fi
		else	
			clean_xml	
			abort "Failed to Fetch MAC Address"
		fi
	fi
	

	local mac=$(cat $TMP_FILE | grep -o -E "^([[:xdigit:]]{2}(:|-)?){5}[[:xdigit:]]{2}$")
	if [[ $mac ]]; then
		mac=$(echo $mac | sed 's/://g')
		printf "base_mac=%s\n" $mac
	else
			clean_xml	
			abort "Failed to Fetch MAC Address"
	fi

	return $TRUE
	
}



function parse_cmdline(){
	# LONG_OPTIONS is a list of space-separated multi-character options.
	#  The string must be in the form:
	#   Example: 'option1 option2 ... optionN'.
	#  Options that takes an argument must be followed by a colon:
	#   Example: 'option1: option2 ... optionN:'
	#  Options with an optional argument must be followed by a double colon:
	#   Example: 'option1:: option2:: ... optionN'
	local LONG_OPTIONS='help verbose base'
	
	[ $# -le 0 ] && usage && abort 'missing parameter'
	
	/usr/bin/getopt --quiet --quiet-output --longoptions="$LONG_OPTIONS" -- "$@"
	EXIT_CODE=$?
	if [ $EXIT_CODE -ne $TRUE ]; then
		usage
		abort "Command line parameter error"
	fi	
	local ARGS="$@"
	eval set -- "$ARGS"
	
	# Make sure to handle the cases for all the options listed in OPTIONS
	#  and LONG_OPTIONS and to fill up the right script-wide variables.
	while [ $# -gt 0 ]; do		
		case "$1" in
			$(check_board_format $1 && echo $1))
				OPT_BOARD=$TRUE
				BOARD=$1				
			;;
			--eth=*)
				abort 'This Option is not supported'
				[ $OPT_BASE -eq $TRUE ] && abort 'only one of "--eth" and "--base" can be specified'
				OPT_ETH=$TRUE
				if [[ $1 =~ ^--eth=.+$ ]]; then
					OPT_ETH_ARG=$(echo $1 | tr [:upper:] [:lower:] | awk -F'=' '{print $2}')
				else
					abort 'missing mandatory parameter'
                                fi

                                if [ $OPT_ETH_ARG != 'all' ]; then
                                        [[ $OPT_ETH_ARG =~ ^[0-9]$ ]] && OPT_ETH_ARG="eth$OPT_ETH_ARG"
                                        ! check_eth $OPT_ETH_ARG && abort "the option \"$1\" is in the wrong format"
                                fi
                        ;;

			--base)
				[ $OPT_ETH -eq $TRUE ] && abort 'only one of "--eth" and "--base" can be specified'
				OPT_BASE=$TRUE
			;;
			all-boards)
				[ $OPT_ALL_SLOTS -eq $TRUE ] && abort 'only one of "all-boards" and "all-slots" can be specified'
				OPT_ALL_BOARDS=$TRUE
			;;
			all-slots)
				[ $OPT_ALL_BOARDS -eq $TRUE ] && abort 'only one of "all-boards" and "all-slots" can be specified'
				OPT_ALL_SLOTS=$TRUE
			;;
			--help)
				usage
				exit $TRUE
			;;
			--verbose)				
				OPT_VERBOSE=$TRUE				
			;;			
			--)
				# "end of argument list"
				shift
				break
			;;
			*)
				abort "unrecognized option ($1)"
			;;
		esac
		shift
	done
	[[ $OPT_BOARD -eq $FALSE && $OPT_ALL_SLOTS -eq $FALSE && $OPT_ALL_BOARDS -eq $FALSE ]] && abort 'missing parameter'
	[[ $OPT_ETH -eq $FALSE && $OPT_BASE -eq $FALSE ]] && abort 'you must specify one option among --eth=<n> or --base'
}

OPT_VERBOSE=$FALSE
OPT_BASE=$FALSE
OPT_ALL=$FALSE
OPT_ALL_BOARDS=$FALSE
OPT_ALL_SLOTS=$FALSE
OPT_BOARD=$FALSE
BOARD=''
OPT_ETH=$FALSE
parse_cmdline $@
get_mac
exit $?
