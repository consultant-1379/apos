#!/bin/bash -u
##
# ------------------------------------------------------------------------
#     Copyright (C) 2014 Ericsson AB. All rights reserved.
# ------------------------------------------------------------------------
##
# Name:
#       baudrate
# Description:
#       The "set baudrate" sub-command of the bspmngr tool.
##
# Changelog:
# Fri Feb 21 2014 - Stefano V
#		Code cleanup and optimization
# Fri Mar 09 2014 - Rajeswari P
#		First Version
##

. $BSPMNGR_DIR/$LIB_COMMON_DIR/bspmngr_common.sh

check_debug


function is_verbose(){
	return $OPT_VERBOSE	
}

function set_baudrate(){
	
	#if [[ $OPT_ALL_BOARDS -eq $TRUE || $OPT_ALL_SLOTS -eq $TRUE ]]; then
         #       abort "Option Not supported"
       # else
                is_slot $BOARD
                EXIT_CODE=$?
                if [ $EXIT_CODE -ne $TRUE ]; then
                        clean_xml
                        abort "Board name specified is not supported"
                fi
       # fi

	local BAUD_RATE=$(get_id_by_baudrate $OPT_BAUD_ARG)
  
	#fetch IP addresses of DMXC
	fetch_dmxc_ip
	
	#fetch shelf address
	fetch_shelf_address

	#fetch shelf id
	fetch_shelf_id
	
	##check for gep5 to be done
	
	printf -v query "BCS:%x%02d%s" $SHELF_ID $BOARD $BAUD_RATE

	$ironsidecmd -a $DMXC_IP_A -p $DMXC_PORT -s "$query"  > /dev/null
	EXIT_CODE=$?
	if [ $EXIT_CODE -ne $TRUE ]; then
	        if [ $EXIT_CODE -eq $NC_SESSION_OPEN_FAILED ]; then
	       		clean_xml
			$ironsidecmd -a $DMXC_IP_B -p $DMXC_PORT -s "$query"  > /dev/null 
			EXIT_CODE=$?
            if [ $EXIT_CODE -ne  $TRUE ]; then
            	abort "Failed to set baudRate"
            fi
		else
			abort "Failed to set baudRate"
        	fi	
	fi	

	printf "The baudrate of board $BOARD has been set to $OPT_BAUD_ARG\n"
}

function usage(){
	cat $MAN_DIR/set_baudrate.man
}

function parse_cmdline(){
	# LONG_OPTIONS is a list of space-separated multi-character options.
	#  The string must be in the form:
	#   Example: 'option1 option2 ... optionN'.
	#  Options that takes an argument must be followed by a colon:
	#   Example: 'option1: option2 ... optionN:'
	#  Options with an optional argument must be followed by a double colon:
	#   Example: 'option1:: option2:: ... optionN'
	local LONG_OPTIONS='help verbose rate=:'
	
	[ $# -le 0 ] && usage && abort 'missing parameter'
	
	/usr/bin/getopt --quiet --quiet-output --longoptions="$LONG_OPTIONS" -- "$@"
	EXIT_CODE=$?
	if [ $EXIT_CODE -ne $TRUE ]; then
		usage
		abort "Command line parameter error"
	fi	
	local ARGS="$@"
	eval set -- "$ARGS"
	
	# Make sure to handle the cases for all the options listed in OPTIONS
	#  and LONG_OPTIONS and to fill up the right script-wide variables.
	while [ $# -gt 0 ]; do		
		case $1 in
			 $(check_board_format $1 && echo $1))
                                BOARD=$1
				if ! boards_are_equal $BOARD $APUB_A; then
                                        if ! boards_are_equal $BOARD $APUB_B; then
                                                abort "this applies only to \"$APUB_A\" (slot $APUB_A_SLOT) and \"$APUB_B\" (slot $APUB_B_SLOT) boards"
                                        fi
                                fi
                        ;;
			--rate=*)
				OPT_RATE=$TRUE
				 VAR=$(echo $1 | awk -F'=' '{print $2}')
				if [[ $VAR =~ ^[0-9]+$ || "$VAR" == "setup" ]]; then
					OPT_BAUD_ARG=$VAR
				else
					abort 'missing mandatory parameter'
				fi
				
				! check_baudrate_format $VAR && abort "the device \"$1\" is wrong or unsupported"
			;;
			#all-boards)
                         #       [ $OPT_ALL_SLOTS -eq $TRUE ] && abort 'only one of "all-boards" and "all-slots" can be specified'
                          #      OPT_ALL_BOARDS=$TRUE
                       # ;;
                       # all-slots)
                        #        [ $OPT_ALL_BOARDS -eq $TRUE ] && abort 'only one of "all-boards" and "all-slots" can be specified'
                         #       OPT_ALL_SLOTS=$TRUE
                       # ;;
			--help)
				usage
				exit $TRUE
			;;
			--verbose)				
				OPT_VERBOSE=$TRUE				
			;;			
			--)
				# "end of argument list"
				shift
				break
			;;
			*)
				abort "unrecognized option ($1)"
			;;
		esac
		shift
	done
	[[ -z $BOARD ]] && abort 'missing parameter'
}

OPT_ETH=$FALSE
OPT_ETH_ARG=''
OPT_DISK=$FALSE
OPT_DISK_ARG=''
APUB_A='apub_a'
APUB_A_SLOT=$(get_slot_by_name $APUB_A)
APUB_B='apub_b'
APUB_B_SLOT=$(get_slot_by_name $APUB_B)
BOARD=''
parse_cmdline $@
set_baudrate
exit $?
