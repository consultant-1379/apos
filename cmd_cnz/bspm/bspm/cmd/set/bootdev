#!/bin/bash -u
##
# ------------------------------------------------------------------------
#     Copyright (C) 2012 Ericsson AB. All rights reserved.
# ------------------------------------------------------------------------
##
# Name:
#       bootdev
# Description:
#       The "set bootdev" sub-command of the bspmngr tool.
##
# Changelog:
# Fri Feb 21 2014 - Stefano V
#		Code cleanup and optimization
# Fri Mar 09 2012 - Francesco Rainone (efrarai)
#		First Version
##

. $BSPMNGR_DIR/$LIB_COMMON_DIR/bspmngr_common.sh
OPT_DISK=
check_debug

function is_verbose(){
	return $OPT_VERBOSE	
}

function set_boot_from_disk()
{
	local BOOTDEV=$OPT_DISK_ARG
        echo "${BOOTDEV}" | grep -q '[0-9]'
        if [ $? = 0 ]; then
        abort "the device "--disk=$BOOTDEV" is wrong or unsupported"
        fi

	#fetch IP addresses of DMXC
	fetch_dmxc_ip

 	#fetch shelf address
 	fetch_shelf_address

	#fetch shelf id
	fetch_shelf_id

	BCS=$(get_id_by_dev $OPT_DISK_ARG)

	printf -v query "BCS:%x%02d%s" $SHELF_ID $BOARD $BCS


	$ironsidecmd -a $DMXC_IP_A -p $DMXC_PORT -s "$query"  > /dev/null
		
	EXIT_CODE=$?
	if [ $EXIT_CODE -ne $TRUE ]; then
	  	if [ $EXIT_CODE -eq $NC_SESSION_OPEN_FAILED ]; then
			$ironsidecmd -a $DMXC_IP_B -p $DMXC_PORT -s "$query"  > /dev/null
			EXIT_CODE=$?
			if [ $EXIT_CODE -ne $TRUE ]; then
				abort "Set boot from disk query failed"
			fi
    	else
    		abort "Set boot from disk query failed"
		fi
    fi

	printf "the boot device of the board $BOARD has been set to $OPT_DISK_ARG\n"	
}

function set_boot_from_eth()
{
	#fetch IP addresses of DMXC
	fetch_dmxc_ip

	#fetch shelf address
	fetch_shelf_address

	#fetch shelf id
	fetch_shelf_id
	

	local BOOTDEV=$OPT_ETH_ARG
         [[ ! $BOOTDEV =~ ^eth[0-9]$ ]] && BOOTDEV="eth${BOOTDEV}"

	BCS=$(get_id_by_dev $BOOTDEV)


	printf -v query "BCS:%x%02d%s" $SHELF_ID $BOARD $BCS


		$ironsidecmd -a $DMXC_IP_A -p $DMXC_PORT -s "$query"  > /dev/null
		EXIT_CODE=$?
	        if [ $EXIT_CODE -ne $TRUE ]; then
                if [ $EXIT_CODE -eq $NC_SESSION_OPEN_FAILED ]; then
			$ironsidecmd -a $DMXC_IP_B -p $DMXC_PORT -s "$query"  > /dev/null
                        EXIT_CODE=$?
                        if [ $EXIT_CODE -ne $TRUE ]; then
                                abort "Error returned from BSP"
                        fi
                else
                        abort "Error returned from BSP"
                fi
			fi

		 printf "the boot device of the board $BOARD has been set to $BOOTDEV\n"	 

}
function set_bootdev(){
	
	is_slot $BOARD
  EXIT_CODE=$?
  if [ $EXIT_CODE -ne $TRUE ]; then
		abort "Board name specified is not supported"
  fi

	if [[ $OPT_DISK -eq $FALSE && $OPT_ETH -eq $FALSE ]]; then
		usage
		return $FALSE
	fi

	#echo " disk option:" $OPT_DISK
	#echo " value of true:" $TRUE

	if [ $OPT_DISK -eq $TRUE ]; then
		set_boot_from_disk
	fi
		
	if [ $OPT_ETH -eq $TRUE ]; then
		set_boot_from_eth
	fi
}



function usage(){
	cat $MAN_DIR/set_bootdev.man
}

function parse_cmdline(){
	# LONG_OPTIONS is a list of space-separated multi-character options.
	#  The string must be in the form:
	#   Example: 'option1 option2 ... optionN'.
	#  Options that takes an argument must be followed by a colon:
	#   Example: 'option1: option2 ... optionN:'
	#  Options with an optional argument must be followed by a double colon:
	#   Example: 'option1:: option2:: ... optionN'
	local LONG_OPTIONS='help verbose eth=: disk=:'
	
	[ $# -le 0 ] && usage && abort 'missing parameter'
	
	/usr/bin/getopt --quiet --quiet-output --longoptions="$LONG_OPTIONS" -- "$@"
	EXIT_CODE=$?
	if [ $EXIT_CODE -ne $TRUE ]; then
		usage
		abort "Command line parameter error"
	fi	
	local ARGS="$@"
	eval set -- "$ARGS"
	
	# Make sure to handle the cases for all the options listed in OPTIONS
	#  and LONG_OPTIONS and to fill up the right script-wide variables.
	while [ $# -gt 0 ]; do		
		case "$1" in
			$(check_board_format $1 && echo $1))
				BOARD=$1
				#echo "Board value" $BOARD
				if ! boards_are_equal $BOARD $APUB_A; then
                                        if ! boards_are_equal $BOARD $APUB_B; then
                                                abort "this applies only to \"$APUB_A\" (slot $APUB_A_SLOT) and \"$APUB_B\" (slot $APUB_B_SLOT) boards"
                                        fi
                                fi
			;;
			--eth=*)
				[ $OPT_DISK -eq $TRUE ] && abort 'only one of "--eth" and "--disk" can be specified'				
				OPT_ETH=$TRUE
				if [[ $1 =~ ^--eth=.+$ ]]; then
					OPT_ETH_ARG=$(echo $1 | tr [:upper:] [:lower:] | awk -F'=' '{print $2}')
				else
					abort 'missing mandatory parameter'
				fi
				
				! check_bootdev_format_v5 $OPT_ETH_ARG && abort "the device \"$1\" is wrong or unsupported"
			;;
			--disk=*)
				[ $OPT_ETH -eq $TRUE ] && abort 'only one of "--eth" and "--disk" can be specified'
				#echo "Disk option set"
				OPT_DISK=$TRUE
				if [[ $1 =~ ^--disk=.+$ ]]; then
					OPT_DISK_ARG=$(echo $1 | tr [:upper:] [:lower:] | awk -F'=' '{print $2}')
				else
					abort 'missing mandatory parameter'
				fi
				
				! check_bootdev_format_v5 $OPT_DISK_ARG && abort "the device \"$1\" is wrong or unsupported"
			;;
			all-boards)
				abort "this applies only to \"$APUB_A\" (slot $APUB_A_SLOT) and \"$APUB_B\" (slot $APUB_B_SLOT) boards"
			;;
			all-slots)
				abort "this applies only to \"$APUB_A\" (slot $APUB_A_SLOT) and \"$APUB_B\" (slot $APUB_B_SLOT) boards"
			;;
			--help)
				usage
				exit $TRUE
			;;
			--verbose)				
				OPT_VERBOSE=$TRUE				
			;;			
			--)
				# "end of argument list"
				shift
				break
			;;
			*)
				abort "unrecognized option ($1)"
			;;
		esac
		shift
	done
	[[ -z $BOARD ]] && abort 'missing parameter'
}

OPT_VERBOSE=$FALSE
OPT_ETH=$FALSE
OPT_ETH_ARG=''
OPT_DISK=$FALSE
OPT_DISK_ARG=''
APUB_A='apub_a'
APUB_A_SLOT=$(get_slot_by_name $APUB_A)
APUB_B='apub_b'
APUB_B_SLOT=$(get_slot_by_name $APUB_B)
BOARD=''
parse_cmdline $@
set_bootdev
exit $?
