#!/bin/bash -u
##
# ------------------------------------------------------------------------
#     Copyright (C) 2012 Ericsson AB. All rights reserved.
# ------------------------------------------------------------------------
##
# Name:
#       bootdev
# Description:
#       The "set bootdev" sub-command of the shelfmngr tool.
##
# Changelog:
# Fri Mar 09 2012 - Francesco Rainone (efrarai)
#	First Version
##

. $SHELFMNGR_DIR/$LIB_COMMON_DIR/shelfmngr_common.sh
. $SHELFMNGR_DIR/$LIB_COMMON_DIR/snmp_queries.sh
check_debug


function is_verbose(){
	return $OPT_VERBOSE	
}

function set_bootdev(){
	SET_BOOTDEV
}

function usage(){
	cat $MAN_DIR/set_bootdev.man
}

function parse_cmdline(){
	# LONG_OPTIONS is a list of space-separated multi-character options.
	#  The string must be in the form:
	#   Example: 'option1 option2 ... optionN'.
	#  Options that takes an argument must be followed by a colon:
	#   Example: 'option1: option2 ... optionN:'
	#  Options with an optional argument must be followed by a double colon:
	#   Example: 'option1:: option2:: ... optionN'
	local LONG_OPTIONS='help verbose eth=: disk=:'
	
	[ $# -le 0 ] && usage && abort 'missing parameter'
	
	/usr/bin/getopt --quiet --quiet-output --longoptions="$LONG_OPTIONS" -- "$@"
	EXIT_CODE=$?
	if [ $EXIT_CODE -ne $TRUE ]; then
		usage
		abort "Command line parameter error"
	fi	
	local ARGS="$@"
	eval set -- "$ARGS"
	
	# Make sure to handle the cases for all the options listed in OPTIONS
	#  and LONG_OPTIONS and to fill up the right script-wide variables.
	while [ $# -gt 0 ]; do		
		case "$1" in
			$(check_board_format $1 && echo $1))
				BOARD=$1
				if ! boards_are_equal $BOARD $APUB_A; then
					if ! boards_are_equal $BOARD $APUB_B; then
						abort "this applies only to \"$APUB_A\" (slot $APUB_A_SLOT) and \"$APUB_B\" (slot $APUB_B_SLOT) boards"
					fi
				fi
			;;
			--eth=*)
				[ $OPT_DISK -eq $TRUE ] && abort 'only one of "--eth" and "--disk" can be specified'				
				OPT_ETH=$TRUE				
				if [[ $1 =~ ^--eth=.+$ ]]; then
					OPT_ETH_ARG=$(echo $1 | tr [:upper:] [:lower:] | awk -F'=' '{print $2}')
				else
					abort 'missing mandatory parameter'
				fi
				
				! check_bootdev_format $OPT_ETH_ARG && abort "the device \"$1\" is wrong or unsupported"
			;;
			--disk=*)
				[ $OPT_ETH -eq $TRUE ] && abort 'only one of "--eth" and "--disk" can be specified'
				OPT_DISK=$TRUE
				if [[ $1 =~ ^--disk=.+$ ]]; then
					OPT_DISK_ARG=$(echo $1 | tr [:upper:] [:lower:] | awk -F'=' '{print $2}')
				else
					abort 'missing mandatory parameter'
				fi
				
				! check_bootdev_format $OPT_DISK_ARG && abort "the device \"$1\" is wrong or unsupported"
			;;
			all-boards)
				abort "this applies only to \"$APUB_A\" (slot $APUB_A_SLOT) and \"$APUB_B\" (slot $APUB_B_SLOT) boards"
			;;
			all-slots)
				abort "this applies only to \"$APUB_A\" (slot $APUB_A_SLOT) and \"$APUB_B\" (slot $APUB_B_SLOT) boards"
			;;
			--help)
				usage
				exit $TRUE
			;;
			--verbose)				
				OPT_VERBOSE=$TRUE				
			;;			
			--)
				# "end of argument list"
				shift
				break
			;;
			*)
				abort "unrecognized option ($1)"
			;;
		esac
		shift
	done
	[[ -z $BOARD ]] && abort 'missing parameter'
}

OPT_VERBOSE=$FALSE
OPT_ETH=$FALSE
OPT_ETH_ARG=''
OPT_DISK=$FALSE
OPT_DISK_ARG=''
APUB_A='apub_a'
APUB_A_SLOT=$(get_slot_by_name $APUB_A)
APUB_B='apub_b'
APUB_B_SLOT=$(get_slot_by_name $APUB_B)
BOARD=''
parse_cmdline $@
set_bootdev
exit $?