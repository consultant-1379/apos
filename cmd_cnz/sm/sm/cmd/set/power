#!/bin/bash -u
##
# ------------------------------------------------------------------------
#     Copyright (C) 2012 Ericsson AB. All rights reserved.
# ------------------------------------------------------------------------
##
# Name:
#       power
# Description:
#       The "set power" sub-command of the shelfmngr tool.
##
# Changelog:
# Fri Mar 09 2012 - Francesco Rainone (efrarai)
#	First Version
##

. $SHELFMNGR_DIR/$LIB_COMMON_DIR/shelfmngr_common.sh
. $SHELFMNGR_DIR/$LIB_COMMON_DIR/snmp_queries.sh
check_debug


function is_verbose(){
	return $OPT_VERBOSE	
}

function set_power(){
	SET_POWER
}

function usage(){
	cat $MAN_DIR/set_power.man
}

function parse_cmdline(){
	# LONG_OPTIONS is a list of space-separated multi-character options.
	#  The string must be in the form:
	#   Example: 'option1 option2 ... optionN'.
	#  Options that takes an argument must be followed by a colon:
	#   Example: 'option1: option2 ... optionN:'
	#  Options with an optional argument must be followed by a double colon:
	#   Example: 'option1:: option2:: ... optionN'
	local LONG_OPTIONS='help verbose state=:'
	
	[ $# -le 0 ] && usage && abort 'missing parameter'
	
	/usr/bin/getopt --quiet --quiet-output --longoptions="$LONG_OPTIONS" -- "$@"
	EXIT_CODE=$?
	if [ $EXIT_CODE -ne $TRUE ]; then
		usage
		abort "Command line parameter error"
	fi	
	local ARGS="$@"
	eval set -- "$ARGS"
	
	# Make sure to handle the cases for all the options listed in OPTIONS
	#  and LONG_OPTIONS and to fill up the right script-wide variables.
	while [ $# -gt 0 ]; do		
		case "$1" in
			$(check_board_format $1 && echo $1))				
				OPT_BOARD=$TRUE
				BOARD=$1
			;;
			all-boards)
				abort "this applies only to one board at a time"
			;;
			all-slots)
				abort "this applies only to one board at a time"
			;;
			--state=*)
				OPT_STATE=$TRUE
				if [[ $1 =~ ^--state=.+$ ]]; then
					OPT_STATE_ARG=$(echo $1 | tr [:upper:] [:lower:] | awk -F'=' '{print $2}')
				else
					abort 'missing mandatory parameter'
				fi
				
				[[ $OPT_STATE_ARG != 'on' && $OPT_STATE_ARG != 'off' ]] && abort "the parameter \"$1\" is wrong or unsupported"
			;;
			--help)
				usage
				exit $TRUE
			;;
			--verbose)				
				OPT_VERBOSE=$TRUE				
			;;			
			--)
				# "end of argument list"
				shift
				break
			;;
			*)
				abort "unrecognized option ($1)"
			;;
		esac
		shift
	done
	[[ $OPT_BOARD -eq $FALSE  || $OPT_STATE -eq $FALSE ]] && abort 'missing parameter'
}

OPT_VERBOSE=$FALSE
OPT_BOARD=$FALSE
OPT_STATE=$FALSE
OPT_STATE_ARG=''
BOARD=''
parse_cmdline $@
set_power
exit $?