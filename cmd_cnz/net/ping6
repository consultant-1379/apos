#!/bin/bash
##
# ------------------------------------------------------------------------
#     Copyright (C) 2020 Ericsson AB. All rights reserved.
# ------------------------------------------------------------------------
##
# Name:
#       ping6
# Description:
# 	Wrapper script for ping6 command
##
#Usage: ping6 [-nqvV][-I interface address] [-p pattern] [-s packet size]
#            [-t ttl] [-M MTU discovery hint] [-W timeout] destinationNone.
##
# Output:
#      PING 2001:1b70:8294:4433:6::4(2001:1b70:8294:4433:6::4) 56 data bytes
#      64 bytes from 2001:1b70:8294:4433:6::4: icmp_seq=1 ttl=64 time=0.073 ms 
#      ..................... min/avg/max/mdev = 0.073/0.081/0.092/0.013 ms
##
# Changelog:
# - Thu Apr 16 2020 - Rajeshwari Padavala (xcsrpad)
#       First version.
##

# Load the apos common functions.
. /opt/ap/apos/conf/apos_common.sh

apos_intro $0
# Global parameters
PING6="/bin/ping6"
CMD_EGREP=/usr/bin/egrep
CMD_GREP=/usr/bin/grep
OPTIONS=""
OPTS="nqvp:s:t:M:VW:I:"
version="This is ping6 1.0"
version+="\n"
version+="Copyright (c) 2020 Ericsson\n"

# Exit-codes
exit_success=0
exit_failure=1
exit_usage=2
exit_option=20
exit_ures_valu=22

# Functions
show_version()
{
	echo -e "$version"
}

function usage(){
        echo -e "Usage: ping6 [-nqvV][-I interface address] [-p pattern] [-s packet size] \n \t    [-t ttl] [-M MTU discovery hint] [-W timeout] destination"
        echo
}

function help()
{
	echo -e "Usage: ping6 [-nqvV][-I interface address] [-p pattern] [-s packet size] [-t ttl] [-M MTU discovery hint] [-W timeout] destination"
	echo -e "
-I interface address 
	Set source address to specified interface address
-n
	Numeric output only
-p pattern
	You may specify upto 16 pad bytes to fill out the packet sent.
-q
	Quiet output
-s packetsize
	Specifies number of data bytes to be sent
-t ttl
	Set the IP Time To Live
-M hint
	Select Path MTU Discovery strategy
-v
	Verbose output
-V
	Show version and exit
-W timeout
	Time to wait for a response, in seconds.
"
}

function check_ip(){
    IP=$1
	if echo "$IP" | grep -E '[0-9a-f]+:+' >/dev/null; then
      isValidIPv6 "$IP"
      [ $? -ne 0 ] && {
        echo "ping6: unknown host $IP "
        exit $exit_ures_valu
      }
    else
      echo "ping6: unknown host $IP "
      exit $exit_ures_valu
    fi    
}

# Main program
interface=
pattern=
packet_size=
ttl=
hint=
timeout=
count=
rem_args=
num_args=$#
eval destination=\$$#
if [ ! -f $PING6 ]; then
	echo "Error when executing (general fault)"
	exit $exit_failure
fi
	while getopts $OPTS option 
	do
		case $option in 
		    I)	# Interface address
			    interface=$OPTARG
			    OPTIONS="$OPTIONS -I $interface"
		    ;;
		    n)	# Numeric output only
			    OPTIONS="$OPTIONS -n"
		    ;;
		    p)	# Pattern specification
			    pattern=$OPTARG
			    OPTIONS="$OPTIONS -p $pattern"
		    ;;
       		q)      # Quiet output
                	OPTIONS="$OPTIONS -q"
        	;;
        	s)      # Packet size
                	packet_size=$OPTARG
                	OPTIONS="$OPTIONS -s $packet_size"
	    	;;
        	t)      # Time to live 
                	ttl=$OPTARG
                	OPTIONS="$OPTIONS -t $ttl"
        	;;
        	M)      # Specify hint
                	hint=$OPTARG
                	OPTIONS="$OPTIONS -M $hint"
        	;;
        	v)      # Verbose output
        	        OPTIONS="$OPTIONS -v"
        	;;
        	V)      # Show version and exit
                	
			        if [ $# -gt 1]; then
				      usage
			        else
				      show_version
			        fi
			        exit $exit_success
        	;;
		    W)      # Timeout
                    timeout=$OPTARG

                    if echo $timeout | egrep -q '^[0-9]+$'; then
                        OPTIONS="$OPTIONS -w $timeout"
                    else
                        echo "timeout parameter should be an integer"
                        exit $exit_option
                    fi                    
            ;;
		    \?)	# Wrong option
			    echo "Illegal option"
			    usage
			    exit $exit_option
	esac
	done 2> /dev/null

	if [[ $num_args == 0 ]]; then
		echo "Incorrect usage"
		usage
		exit $exit_usage
	fi 
    shift $((OPTIND - 1))
	rem_args="$@"
	check_ip $destination
	
    $PING6 $OPTIONS $rem_args 2> /dev/null
    res=$?
    if [[ $res -ne 0 && $res -ne 1 ]]; then
            echo "Incorrect usage"
            usage
            exit $exit_failure
    fi

apos_outro $0
exit $exit_success

# End of file
