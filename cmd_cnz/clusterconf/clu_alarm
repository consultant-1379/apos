#!/bin/bash
# Author: Madhu & Deepti

# Changelog
# Updated by XPRANSI
# Date: 27-10-2011


## Changed by Madhu


# Functions

# User-Input validations	

#validation for target
 validate_target() {
			target=${!1}
                        if [ -z $target ] ; then
                                return 1
			else
                        num=$( echo $target | grep -Eq "^[0-9]+$" )
                        chk_num=$?
                        	if [ $chk_num != 0 ] && [ $target != "control" ]&& [ $target != "payload" ] && [ $target != "all" ] ; then
 	                        return 1
       				fi                      
			fi
			echo $target
	}

# Validation for alarm type
 validate_type() {
			atype=${!1}
                        if [ -z $atype ] ; then
                                return 1

                        else
				if [ $atype != "disk_usage" ] && [ $atype != "memory_usage" ] && [ $atype != "disk_usage_minor" ] && [ $atype != "disk_usage_major" ] && [ $atype != "disk_usage_critical" ] ; then
                                return 1
				fi
                        fi

			echo $atype
	}

# Validation for threshold
 validate_threshold() {
			threshold=${!1}
			if [ -z $threshold ] ; then
				return 1
			else
                        num=$( echo $threshold | grep -Eq "^[0-9]+$" )
                        chk_num=$?
	                        if [ $chk_num != 0 ] || [ $threshold -gt 100 ] ; then
                                return 1
				fi
			fi
			echo $threshold
	}

# To delete an existing alarm rule
 delete() {
        word=${!1}
        rule=${!2}
        rule_num=`validate_threshold rule`
        if [ $? -ne 0 ]
        then
                help
                echo "Enter rule number as argument. Empty values not accepted "
                exit 1
        fi

        # Calling cluster_parse file to delete rule
        $clu_file $word --delete $rule_num

	}

# To add/modify an existing alarm rule
  add_mod() {
        word=${!1}
        arg=${!2}
        target=${!3}
        atype=${!4}
        threshold=${!5}
	status=${!6}
	
	#echo status: $status
        w1=$(echo $arg | cut -d : -f 2)
	#echo word: $w1
	if [ "$w1" != "$word" ]
	 then
        	help
                echo "Enter correct format of arguments. "
                exit 1
	fi

	if [ $status == "modify" ]
	then
        	rule=$(echo $arg | cut -d: -f 1)
	        rule_num=`validate_threshold rule`
	#	echo rule num: $rule_num
	        if [ $? -ne 0 ]
	        then
        	        help
                	echo "Enter correct format of arguments. "
	                exit 1
        	fi
	fi
        target_ip=`validate_target target`
        if [ $? -ne 0 ]
        then
                help
                echo -e "Target value should be either node number or node type control/payload or all. Empty values not accepted"
                exit 1
        fi

        alarm_type=`validate_type atype`
        if [ $? -ne 0 ]
        then
                help
                echo "Alarm type should be either disk_usage/disk_usage_minor/disk_usage_major/disk_usage_critical/ memory_usage. Empty values not accepted."
                exit 1
        fi
        threshold_ip=`validate_threshold threshold`
        if [ $? -ne 0 ]
        then
                help
                echo "Integer values less than 100 expected for threshold. Empty values not accepted."
                exit 1
        fi
        # Calling cluster_parse file to add/modify alarm rule
        rule="$word $target_ip $alarm_type $threshold_ip"
        chk_rule="$word $target_ip $alarm_type"
	if [ $status == "modify" ]
        then
	        $clu_file $word --modify $rule_num $rule $chk_rule
	else
        	$clu_file $word --add $rule $chk_rule
	fi
        }

# To display existing alarm rules
 display() {
        $clu_file $word --display
	}

# To display help
help()
{
echo -e " 
Usage: clu_$word <option> <rule>

Options:
-a|--add 	<New-rule>			To add a new $word rule 
-d|--delete 	<Existing-rule-number>		To delete an existing $word rule
-m|--modify 	<rule-number>:<new-rule>	To modify an existing $word rule
-D|--display					To display all the existing rules
-h|--help					To display help

Rule: alarm <target> <type> <threshold>
<target> 		<Node-number|control|payload|all>
<type> 			<disk_usage|memory_usage|disk_usage_minor|disk_usage_major|disk_usage_critical>
<threshold> 		Threshold for the alarm (in percent)
"
}


#Main


pwd=`pwd`
fname="clu_parse"
clu_file="/opt/ap/apos/bin/clusterconf/$fname"
word="alarm"
arg=$#
#echo "$arg"

if [ -f /cluster/etc/cluster.conf ] ; then
        clu_Conf_path="/cluster/etc/"
        clu_Conf_file="cluster.conf"
else
        echo -e "\n/cluster/etc/cluster.conf file does not exists"
        exit 1
fi

        if [ -f $clu_file ] ; then
                if [ -x $clu_file ] ; then
                 ch=$1
		 arg2=$2
		 arg3=$3
		 arg4=$4
	         arg5=$5

		  case $ch in
			--add|-a)
				st="add"
				if [ $arg -gt 5 ]; then 
					echo "Illegal arguments"
					help
				else	
					add_mod word arg2 arg3 arg4 arg5 st 
		   		fi
			   	;;
			--delete|-d)
				if [ $arg -gt 2 ]; then
                                        echo "Illegal arguments"
                                        help
                                else  
					delete word arg2
				fi
		   	   	;;
			--modify|-m)
				st="modify"
				if [ $arg -gt 5 ]; then
                                        echo "Illegal arguments"
                                        help
                                else
					add_mod word arg2 arg3 arg4 arg5 st
		   	   	fi
				;;
			--display|-D)
				if [ $arg -gt 1 ]; then
                                        echo "Illegal arguments"
                                        help
                                else 
					display
		   	   	fi 
				;;
			--help|-h) 
				if [ $arg -gt 1 ]; then
                                	echo "Illegal arguments"
                                        help
                                else
					help
				fi
				 ;;
			*) 	echo -e "\nWrong input format, please follow the below format...\n"
				help
				;;
		  esac 
 	               else
                        echo -e "\n$clu_file is not executable"
                fi
        else
           echo -e "\n$clu_file file does not exists"
        fi

