#!/bin/bash
# Author: Satya Deepthi

# Changelog
# Updated by XPRANSI
# Date: 27-10-2011

# Functions

# User-Input validations	

#validation for tipc address
 validate_tipc() {
		tipc_format="\b(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\b"
		tipc_addr=${!1}
		chk=$(echo $tipc_addr | egrep $tipc_format)
		 if [ $? -ne 0 ] && [ $tipc_addr != "dynamic" ]
			then return 1
		 fi
		echo $tipc_addr
	}

#validation for target
 validate_target() {
                        target=${!1}
                        if [ -z $target ] ; then
                                return 1
                        else
                        flg=0
                       for i in $(cat $clu_Conf_path$clu_Conf_file | grep ^"node" | cut -d ' ' -f 2)
                        do
                         	if [ $i == $target ]
	                         then flg=1
        	                fi
                        done
                	        if [ $flg == 0 ] && [ $target != "control" ]&& [ $target != "payload" ] && [ $target != "all" ] ; then
                               	return 1
                        	fi
			fi
			echo $target
        }

# validation for interface
 validate_interface() {
                        interface=${!1}
	                if [ -z $interface ] ; then
                                return 1
			else
			flg=0
	# Interfaces defined for that particular node only can be given
			for i in $(cat $clu_Conf_path$clu_Conf_file | grep ^interface | grep -v alias | awk '{print $3}' | sort -n | uniq)
			do
			 if [ $i == $interface ]
			 then flg=1
			 fi
			done
				if [ $flg == 0 ]
				then return 1
				fi
			fi
                        echo $interface
        }

 validate_integer() {
                        rule=${!1}
                        if [ -z $rule ] ; then
                                return 1
                        else
                        num=$( echo $rule | grep -Eq "^[0-9]+$")
                        chk_num=$?
                                if [ $chk_num -eq 1 ] ; then
                                return 1
                                fi
                        fi
                        echo $rule
        }

# To delete an existing tipc rule
 delete() {
        word=${!1}
        rule=${!2}
        rule_num=`validate_integer rule`
        if [ $? -ne 0 ]
        then
                help
                echo "Enter rule number as argument. Empty values not accepted "
                exit 1
        fi

        # Calling cluster_parse file to delete boot rule
        $clu_file $word --delete $rule_num
	}

# To add/modify an existing tipc rule
  add_mod() {
        word=${!1}
        arg=${!2}
        target=${!3}
        addr=${!4}
        interface=${!5}
        st=${!6}
	no_of_ifs=$(echo $interface | awk '{print NF}')

	w1=$(echo $arg | cut -d : -f 2)
	if [ ! "$w1" == "$word" ]
	 then 	
		echo "Wrong format"
		help
		exit 1
	fi
        
	if [ $st == "modify" ]
	then 
		rule=$(echo $arg | cut -d: -f 1)
        	rule_num=`validate_integer rule`
	        if [ $? -ne 0 ]
        	then
                	help
	                echo "Enter correct format of arguments. "
        	        exit 1
	        fi
	fi

        target_ip=`validate_target target`
        if [ $? -ne 0 ]
        then
                help
               echo "Target value should be either node number or node type (control/payload) or all. Empty values not accepted "
                exit 1
        fi

        tipc_ip=`validate_tipc addr`
        if [ $? -ne 0 ]
            then
                 help
                 echo "TIPC address should be of correct format. Empty values not accepted "
                 exit 1
        fi

	for i in $(seq 1 $no_of_ifs)
	do
		int=$(echo $interface | cut -d ' ' -f "$i")
		#echo interface: $int
        	interface_ip=`validate_interface int`
	        if [ $? -ne 0 ]
        	then
                 help
                 echo "Interface name should match with existing interfaces for the target. Empty values not accepted."
                 exit 1
	        fi
	done

        # Calling cluster_parse file to modify boot rule
	new_rule="$word $target_ip $tipc_ip $interface"
	chk_rule="$word $target_ip"
	if [ $st == "modify" ]
	then 
        	$clu_file $word --modify $rule_num $new_rule $chk_rule
	else
		$clu_file $word --add $new_rule $chk_rule
	fi
        }

# To display existing DNS rules
 display() {
        $clu_file $word --display
	}

# To display help
help()
{
echo "
Usage: clu_$word <option> <rule>

Options:
-a|--add 	<New-rule>			To add a new $word rule 
-d|--delete 	<Existing-rule-number>		To delete an existing $word rule
-m|--modify 	<rule number>:<new-rule>	To modify an existing $word rule
-D|--display					To display all the existing rules
-h|--help					To display help

Rule: $word <target> <address> <interface1>..<interface n>
<target node>           <Node-number|control|payload|all>
<address>		TIPC address Eg. Z.C.N
<interface>		Each interface that should be used by TIPC 
"
}


#Main


pwd=`pwd`
fname="clu_parse"
clu_file="/opt/ap/apos/bin/clusterconf/$fname"
word="tipc"

if [ -f /cluster/etc/cluster.conf ];then
        clu_Conf_path="/cluster/etc/"
        clu_Conf_file="cluster.conf"
else
        echo -e "\n/cluster/etc/cluster.conf file does not exists"
        exit 1
fi

        if [ -f $clu_file ];then
                if [ -x $clu_file ];then
                 ch=$1
		 arg=$2
		 arg3=$3
		 arg4=$4
		 shift 4
		 arg5=$*
		  case $ch in
			--add|-a)
				st="add"
				#echo rem: $arg5
				add_mod word arg arg3 arg4 arg5 st
		   	   	;;
			--delete|-d)
				if [ $# -gt 2 ]; then
                                        echo "Illegal arguments"
                                        help
                                else  
					delete word arg
		   	   	fi
				;;
			--modify|-m)
				st="modify"
				add_mod word arg arg3 arg4 arg5 st
		   	   	;;
			--display|-D) 
				if [ $# -gt 1 ]; then
                                        echo "Illegal arguments"
                                        help
                                else
					display
		   	   	fi
				;;
			--help|-h) 
				 if [ $# -gt 1 ]; then
                                        echo "Illegal arguments"
                                        help
                                else
					help
				fi
				;;
			*) 	echo -e "\nWrong input format, please follow the below format...\n"
				help
				;;
		  esac 
	else
                        echo -e "\n$clu_file is not executable"
                fi
        else
                echo -e "\n$clu_file file does not exists"
        fi

