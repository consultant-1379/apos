#!/bin/bash
# Author: Satya Deepthi

# Changelog
# Updated by XPRANSI
# Date: 27-10-2011

# Funtions

# User-Input validations	

#validation for target
 validate_target() {
			target=${!1}
                        if [ -z $target ] ; then
                                return 1
			else
                        num=$( echo $target | grep -Eq "^[0-9]+$")
                        chk_num=$?
                        	if [ $chk_num != 0 ] && [ $target != "control" ]&& [ $target != "payload" ] && [ $target != "all" ] ; then
 	                        return 1
       				fi                      
			fi
			echo $target
	}

# Validation for watchdog type
 validate_type() {
			atype=${!1}
                        if [ -z $atype ] ; then
                                return 1

                        else
				if [ $atype != "ipmi" ] && [ $atype != "soft" ] ; then
                                return 1
				fi
                        fi

			echo $atype
	}

# Validation for rule
 validate_integer() {
			threshold=${!1}
			if [ -z $threshold ] ; then
				return 1
			else
                        num=$( echo $threshold | grep -Eq "^[0-9]+$")
                        chk_num=$?
	                        if [ $chk_num -eq 1 ] ; then
                                return 1
				fi
			fi
			echo $threshold
	}

# To delete an existing watchdog rule
 delete() {
        word=${!1}
        rule=${!2}
        rule_num=`validate_integer rule`
        if [ $? -ne 0 ]
        then
                help
                echo "Enter rule number as argument. Empty values not accepted "
                exit 1
        fi

        # Calling cluster_parse file to delete boot rule
        $clu_file $word --delete $rule_num

	}

# To add/modify an existing watchdog rule
  add_mod() {
        word=${!1}
        arg=${!2}
	target_new=${!3}
        wtype_new=${!4}
	st=${!5}
        w1=$(echo $arg | cut -d : -f 2)
        if [ "$w1" != "$word" ]
         then
                echo "Wrong format"
                help
                exit 1
        fi

	if [ $st == "modify" ]
	then 
	        rule=$(echo $arg | cut -d: -f 1)
        	rule_num=`validate_integer rule`
	        if [ $? -ne 0 ]
        	then
                	help
	                echo "Enter correct format of arguments. "
        	        exit 1
	        fi
	fi

        target_new=`validate_target target_new`
        if [ $? -ne 0 ]
        then
		help 
		echo "Target value should be either node number or node type (control/payload) or all. Empty values not accepted."
                exit 1
        fi

        wtype_new=`validate_type wtype_new`
        if [ $? -ne 0 ]
        then
		help 
		echo "Watchdog type should be either ipmi or soft. Empty values not accepted."
                exit 1
        fi

        # Calling cluster_parse file to modify alarm rule
	new_rule="watchdog $target_new $wtype_new"
	chk_rule="watchdog $target_new"
	if [ $st == "modify" ]
	then 
        	$clu_file $word --modify $rule_num $new_rule $chk_rule
	else
		$clu_file $word --add $new_rule $chk_rule
	fi
        }

# To display existing alarm rules
 display() {
        $clu_file $word --display
	}

# To display help
help()
{
echo "
Usage: clu_watchdog <option> <rule>

Options:
-a|--add 	<New-rule>			To add a new watchdog rule 
-d|--delete 	<rule-number>			To delete an existing watchdog rule
-m|--modify 	<rule-number>:<new-rule>	To modify an existing watchdog rule
-D|--display					To display all the existing rules
-h|--help					To display help

Rule: watchdog <target> <watchdog type>
<target> 		<Node-number|control|payload|all>
<alarm type> 		<soft|ipmi>
"
}


#Main


pwd=`pwd`
fname="clu_parse"
clu_file="/opt/ap/apos/bin/clusterconf/$fname"
word="watchdog"

if [ -f /cluster/etc/cluster.conf ];then
        clu_Conf_path="/cluster/etc/"
        clu_Conf_file="cluster.conf"
else
        echo -e "\n/cluster/etc/cluster.conf file does not exists"
        exit 1
fi

        if [ -f $clu_file ];then
                if [ -x $clu_file ];then
                 ch=$1
		 arg2=$2
		 arg3=$3
		 arg4=$4

		  case $ch in
			--add|-a)
				st="add"
				if [ $# -gt 4 ]; then
                                        echo "Illegal arguments"
                                        help
                                else
					add_mod word arg2 arg3 arg4 st
		   	   	fi
				;;
			--delete|-d)
				if [ $# -gt 2 ]; then
                                        echo "Illegal arguments"
                                        help
                                else  
					delete word arg2
		   	   	fi
				;;
			--modify|-m)
				st="modify"
				if [ $# -gt 4 ]; then
                                        echo "Illegal arguments"
                                        help
                                else
					add_mod word arg2 arg3 arg4 st
		   	   	fi
				;;
			--display|-D)
				if [ $# -gt 1 ]; then
                                        echo "Illegal arguments"
                                        help
                                else
					display
		   	   	fi
				;;
			--help|-h) 
				if [ $# -gt 1 ]; then
                                        echo "Illegal arguments"
                                        help
                                else
					help
				fi
				;;
			*) 	echo -e "\nWrong input format, please follow the below format...\n"
				help
				;;
		  esac 
	else
                        echo -e "\n$clu_file is not executable"
                fi
        else
                echo -e "\n$clu_file file does not exists"
        fi

