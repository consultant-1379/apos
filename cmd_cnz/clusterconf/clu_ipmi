#!/bin/bash
# Author: Satya Deepthi

# Changelog
# Updated by XPRANSI
# Date: 27-10-2011

# Funtions

# User-Input validations	

#validation for ip address
 validate_ip() {
		ip_format="\b(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\b"
		ipaddr=${!1}
		target=${!2}
		chk=$(echo $ipaddr | egrep $ip_format)
		if [ $? -ne 0 ]
			then return 1
		fi

#If target is a single node, IP address must be same as Node IP
#                num=$( echo $target | grep -Eq "^[0-9]+$")
#                chk_num=$?
#               if [ "$chk_num" == 0 ]
#                then
#                        node_ip=$(cat /cluster/etc/cluster.conf | grep ^ip | awk '{if($2=='$target') print $5}')
#                        if [ "$ipaddr" != "$node_ip" ]
#                         then return 1
#                        fi
#                else

# Check whether IP address is in the internal network
		col=$(( $( cat /cluster/etc/cluster.conf | grep ^"network internal" | cut -d ' ' -f 3 | cut -d / -f 2) / 8))
		pattern=$( cat /cluster/etc/cluster.conf | grep ^"network internal" | cut -d ' ' -f 3 | awk -F '.' '{OFS="."; NF='$col'; print}')
		 if [ "$( echo $ipaddr | grep -c "$pattern")" == 0 ]
			then return 1
		 fi
#		fi
		echo $ipaddr
	}

#validation for target
 validate_target() {
                        target=${!1}
                        if [ -z $target ] ; then
                                return 1
                        else
                        num=$( echo $target | grep -Eq "^[0-9]+$")
                        chk_num=$?
                                if [ $chk_num != 0 ] && [ $target != "control" ]&& [ $target != "payload" ] && [ $target != "all" ] ; then
                                return 1
                                fi
                        fi
                        echo $target
        }

#validation for user
 validate_user() {
		user=${!1}
		if [ -z $user ]
		 then return 1
		fi
		echo $user
	}

 validate_integer() {
                        threshold=${!1}
                        if [ -z $threshold ] ; then
                                return 1
                        else
                        num=$( echo $threshold | grep -Eq "^[0-9]+$")
                        chk_num=$?
                                if [ $chk_num -eq 1 ] ; then
                                return 1
                                fi
                        fi
                        echo $threshold
        }

# To delete an existing rule
 delete() {
        word=${!1}
        rule=${!2}
        rule_num=`validate_integer rule`
        if [ $? -ne 0 ]
        then
                help
                echo "Enter rule number as argument. Empty values not accepted "
                exit 1
        fi

        # Calling cluster_parse file to delete rule
        $clu_file $word --delete $rule_num
	}

# To add/modify an existing IPMI rule
  add_mod() {
        word=${!1}
        arg=${!2}
        target=${!3}
        ipaddr=${!4}
        user=${!5}
        st=${!6}

        w1=$(echo $arg | cut -d : -f 2)
        if [ "$w1" != "$word" ]
         then
                help
                echo "Wrong format of arguments"
                exit 1
        fi
	if [ $st == "modify" ]
	then 
	        rule=$(echo $arg | cut -d: -f 1)
        	rule_num=`validate_integer rule`
	        if [ $? -ne 0 ]
	        then
        	        help
                	echo "Enter correct format of arguments. "
	                exit 1
        	fi
	fi
        target_new=`validate_target target`
        if [ $? -ne 0 ]
        then
                help
               echo "Target value should be either node number or node type (control/payload) or all. Empty values not accepted "
                exit 1
        fi

        ipaddr_ip=`validate_ip ipaddr target_new`
        if [ $? -ne 0 ]
        then
                help
                echo "IP address should be of the format 172.16.67.45 Empty values not accepted "
#                num=$( echo $target_new | grep -Eq "^[0-9]+$")
#                chk_num=$?
#                if [ $chk_num == 0 ]
#                 then echo "IPMI address must be same as actual IP address of the target node"
		 echo "IPMI address should be within the network defined as internal."
#                fi
                exit 1
        fi

        user_ip=`validate_user user`
        if [ $? -ne 0 ]
        then
                help
                echo "Empty values not accepted for IPMI user." 
                exit 1
        fi

        # Calling cluster_parse file to modify boot rule
	rule="$word $target_new $ipaddr_ip $user_ip"
	chk_rule="$word $target_new"
	if [ $st == "modify" ]
	then 
        	$clu_file $word --modify $rule_num $rule $chk_rule
	else
		$clu_file $word --add $rule $chk_rule
	fi
        }

# To display existing alarm rules
 display() {
        $clu_file $word --display
	}

# To display help
help()
{
echo "
Usage: clu_ipmi <option> <rule>

Options:
-a|--add 	<New-rule>			To add a new $word rule 
-d|--delete 	<Existing-rule-number>		To delete an existing $word rule
-m|--modify 	<rule number>:<new-rule>	To modify an existing $word rule
-D|--display					To display all the existing rules
-h|--help					To display help

Rule: ipmi <target> <IP address> <user>
<target node>           <Node-number|control|payload|all>
<IP address> 		Eg. 172.16.67.45 
<user>			Eg. ipmiuser, root, etc.
"
}


#Main


pwd=`pwd`
fname="clu_parse"
clu_file="/opt/ap/apos/bin/clusterconf/$fname"
word="ipmi"

if [ -f /cluster/etc/cluster.conf ];then
        clu_Conf_path="/cluster/etc/"
        clu_Conf_file="cluster.conf"
else
        echo -e "\n/cluster/etc/cluster.conf file does not exists"
        exit 1
fi

        if [ -f $clu_file ];then
                if [ -x $clu_file ];then
                 ch=$1
		 arg=$2
		 arg3=$3
		 arg4=$4
		 arg5=$5
		  case $ch in
			--add|-a)
				st="add"
				if [ $# -gt 5 ]; then
                                        echo "Illegal arguments"
                                        help
                                else
					add_mod word arg arg3 arg4 arg5 st
		   	   	fi
				;;
			--delete|-d)
				if [ $# -gt 2 ]; then
                                        echo "Illegal arguments"
                                        help
                                else
					delete word arg
		   	   	fi
				;;
			--modify|-m)
				st="modify"
				if [ $# -gt 5 ]; then
                                        echo "Illegal arguments"
                                        help
                                else
					add_mod word arg arg3 arg4 arg5 st
		   	   	fi
				;;
			--display|-D)
				if [ $# -gt 1 ]; then
                                        echo "Illegal arguments"
                                        help
                                else
					display
		   	   	fi
				;;
			--help|-h)
				if [ $# -gt 1 ]; then
                                        echo "Illegal arguments"
                                        help
                                else
					help
				fi
				;;
			*) 	echo -e "\nWrong input format, please follow the below format...\n"
				help
				;;
		  esac 
	else
                        echo -e "\n$clu_file is not executable"
                fi
        else
                echo -e "\n$clu_file file does not exists"
        fi

