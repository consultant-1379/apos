#!/bin/bash
# Author: Satya Deepthi

# Changelog
# Updated by XPRANSI
# Date: 27-10-2011
# 27 June 2014 - Torgny Wilhelmsson
#    Fix for TR HS71829 rifdef command fails in case vlan is defined with tag = 1
#       In the check rule for modifying interface the dot '.' in the interface name
#       is interpreted as any charcter in grep command in file clu_parse.
#       Added VLAN to end of check rule to avoid confusion betwen vlan and aliases.
#       Check rule change to translate '.' to '\.' implemented in clu_parse.
#
# Functions

# User-Input validations    
#validation for interfaces for bonding
 validate_if() {
                        interface=${!1}
                        if [ -z $interface ] ; then
                                return 1
                        else
                        flg=0
        # Only Interfaces already defined, can be given for bonding
                        for i in $( cat /cluster/etc/cluster.conf | grep ^interface | grep -v alias | awk '{print $3}' | sort -n | uniq | grep ^eth)
                        do
                         if [ $i == $interface ]
                         then flg=1
                         fi
                        done
                                if [ $flg == 0 ]
                                then return 1
                                fi
                        fi
                        echo $interface
    }

#Validation for existing interfaces
 validate_interface() {
                        interface=${!1}
                        if [ -z $interface ] ; then
                                return 1
                        else
                        flg=0
        # Only Interfaces already defined, can be given for alias and vlan
                        for i in $( cat /cluster/etc/cluster.conf | grep ^interface | grep -v alias | awk '{print $3}' | sort -n | uniq)
                        do
                         if [ $i == $interface ]
                         then flg=1
                         fi
                        done
                                if [ $flg == 0 ]
                                then return 1
                                fi
                        fi
                        echo $interface
        }

#validation for device
 validate_device() {
        device=${!1}
        type1=${!2}
        if [ -z $device ]       
            then return 1
        else
            if [ $( echo $device | grep -c ^"$type1") == 0 ]
            then return 1
            fi
        fi
        echo $device
    } 
#validation for target
 validate_target() {
                        target=${!1}
                        if [ -z $target ] ; then
                                return 1
                        else
                        num=$( echo $target | grep -Eq "^[0-9]+$")
                        chk_num=$?
                                if [ $chk_num != 0 ] && [ $target != "control" ]&& [ $target != "payload" ] && [ $target != "all" ] ; then
                                return 1
                                fi
                        fi
                        echo $target
        }

#validation for MAC address
 validate_mac() {
        mac=${!1}
                mac_format="([0-9a-fA-F]{2}\:){5}[0-9a-fA-f]{2}"
                chk=$(echo $mac | egrep ^$mac_format$)
#               echo $mac | egrep "^([0-9a-fA-F]{2}\:){5}[0-9a-fA-F]{2}$"
                if [ $? -ne 0 ]
                        then return 1
                fi
                echo $mac
    }
# validation for VLAN ID
  validate_vlan() {
            id=${!1}
                if [ -z $id ] ; then
                    return 1
                else
                        num=$( echo $id | grep -Eq "^[0-9]+$")
                        chk_num=$?
                                if [ $chk_num -eq 1 ] ; then
                                return 1
                                fi
                fi
            if [ $id -gt 4095 ]
                then return 1
            fi
    flg=0
    for i in $(ls /proc/net/vlan)
    do
        if [ "$( cat /proc/net/vlan/$i | grep VID | awk '{print $3}')" == $id ]
        then flg=1
        fi
    done
        if [ $flg != 1 ]
            then return 1
        fi
                        echo $id
        }

 validate_integer() {
                        threshold=${!1}
                        if [ -z $threshold ] ; then
                                return 1
                        else
                        num=$( echo $threshold | grep -Eq "^[0-9]+$")
                        chk_num=$?
                                if [ $chk_num -eq 1 ] ; then
                                return 1
                                fi
                        fi
                        echo $threshold
        }

# To delete an existing rule
 delete() {
        word=${!1}
        rule=${!2}
        rule_num=`validate_integer rule`
        if [ $? -ne 0 ]
        then
                help
                echo "Enter rule number as argument. Empty values not accepted "
                exit 1
        fi

        # Calling cluster_parse file to delete boot rule
        $clu_file $word --delete $rule_num
    }

# To add/modify an existing rule
  add_mod() {
        word=${!1}
        arg=${!2}
    target=${!3}
    rem_arg=${!4}
        st=${!5}
        w1=$(echo $arg | cut -d : -f 2)
        if [ "$w1" != "$word" ]
         then
                echo "Wrong format"
                help
                exit 1
        fi

    if [ $st == "modify" ]
    then 
            rule=$(echo $arg | cut -d: -f 1)
            rule_num=`validate_integer rule`
            if [ $? -ne 0 ]
            then
                    help
                    echo "Enter correct format of arguments. "
                    exit 1
            fi
    fi

        target_new=`validate_target target`
        if [ $? -ne 0 ]
        then
                help
               echo "Target value should be either node number or node type (control/payload) or all. Empty values not accepted "
                exit 1
        fi

    interface_type=$( echo $rem_arg | awk '{print $2}')
    chk_arg=$( echo $rem_arg | awk '{print $1}')
    if [ "$interface_type" == "alias" ]
    then
#       echo alias
        dev_alias=$( echo $rem_arg | awk '{print $1}')
            if [ $( echo $rem_arg | grep -c :) == 0 ]
            then 
             help 
             echo "Alias ID should be defined with :"
             exit 1
            fi
        device=$( echo $dev_alias | cut -d : -f 1)
        #echo device: $device
                device_new=`validate_interface device`
                if [ $? -ne 0 ]
                then
                        help
                        echo "Only existing interfaces can be aliased. Empty values not accepted "
                        exit 1
                fi

        aliasID=$( echo $dev_alias | cut -d : -f 2)
        #echo aliasID: $aliasID
        aliasID_new=`validate_integer aliasID`
            if [ $? -ne 0 ]
            then
                    help
                    echo "Integer value expected for alias ID. Empty values not accepted "
                    exit 1
            fi

    elif [ "$interface_type" == "vlan" ]
    then 
        #echo vlan
        dev_vlan=$( echo $rem_arg | awk '{print $1}')
        #echo $dev_vlan
                if [ $( echo $rem_arg | grep -c "\.") == 0 ]
                 then
                         help
                         echo "VLAN ID should be defined with ."
                         exit 1
                fi
        device=$( echo $dev_vlan | cut -d . -f 1)
        #echo device: $device
                device_new=`validate_interface device`
                if [ $? -ne 0 ]
                then
                        help
                        echo "VLAN can be defined only for existing interfaces. Empty values not accepted "
                        exit 1
                fi
        vlanID=$( echo $dev_vlan | cut -d . -f 2)
        #echo VLANID: $vlanID
        vlanID_new=`validate_vlan vlanID`
                if [ $? -ne 0 ]
                then
                        help
                        echo "Integer value less than 4095 expected for VLAN ID. Empty values not accepted "
                        exit 1
                fi
        elif [ "$interface_type" == "macvlan" ]
        then
                #echo macvlan
                device=$( echo $rem_arg | awk '{print $1}')
                type1="mvl"
                device_new=`validate_device device type1`
                if [ $? -ne 0 ]
                then
                        help
                        echo "Device name for macvlan Interface should start with mvl. Empty values not accepted "
                        exit 1
                fi
                if0=$( echo $rem_arg | awk '{print $3}')
                mac=$( echo $rem_arg | awk '{print $4}')
                if0_new=`validate_if if0`
                st1=$?
                mac_new=`validate_mac mac`
                st2=$?
                if [ $st1 -ne 0 ]; then 
            help
            echo 1
                        echo "Please enter correct format for MAC address/interface values. Empty values not accepted "
                    exit 1
                fi
        if [ $st1 -eq 0 ]; then
            if [[ -n "$mac" ]]; then
                if [ $st2 -ne 0 ]; then
                    help
                    echo 2
                                echo "Please enter correct format for MAC address/interface values. Empty values not accepted "
                                exit 1
                fi
                :
            fi
            :
        fi
        if [ "$target" == "control" ]; then
            if [ -n "$mac" ]; then
            echo "Mentioning MAC address is not valid if the target node is control"
            exit 1
            fi
        fi
            

    elif [ "$interface_type" == "ethernet" ]
    then 
        #echo ethernet 
        device=$( echo $rem_arg | awk '{print $1}')
        type1="eth"
                device_new=`validate_device device type1`
                if [ $? -ne 0 ]
                then
                        help
                        echo "Device name for ethernet Interface should start with eth. Empty values not accepted "
                        exit 1
                fi
        mac=$( echo $rem_arg | awk '{print $3}')
                mac_new=`validate_mac mac`
                if [ $? -ne 0 ]
                then
                        help
                        echo "Please enter correct format for MAC address. Empty values not accepted "
                        exit 1
                fi
    elif [ "$interface_type" == "bonding" ]
    then
        #echo bonding
                device=$( echo $rem_arg | awk '{print $1}')
        type1="bond"
		device_new=`validate_device device type1`
		if [ $? -ne 0 ]
		then
				help
				echo "Device name for bonding should start with bond. Empty values not accepted "
				exit 1
		fi
		if0=$( echo $rem_arg | awk '{print $3}')
		if1=$( echo $rem_arg | awk '{print $4}')
		if0_new=`validate_if if0`
		st1=$?
		if1_new=`validate_if if1`
		st2=$?
		if [ $st1 -ne 0 ] || [ $st2 -ne 0 ]
		then
				help
				echo "Please enter existing interface values. Empty values not accepted "
				exit 1
		fi

    else 
        help
        echo "Wrong type of interface mentioned. Please enter either alias, vlan, ethernet or bonding"
        exit 1
    fi
        
# Calling cluster_parse file to add/modify rule
    rule="$word $target_new $rem_arg"
    if [ "$interface_type" == "vlan" ] ;    then 
        chk_rule="$word $target_new $chk_arg vlan"
    else
        chk_rule="$word $target_new $chk_arg"
    fi
    #echo check rule: $chk_rule
    if [ $st == "modify" ]
    then 
            $clu_file $word --modify $rule_num $rule $chk_rule
    else
        $clu_file $word --add $rule $chk_rule
    fi
        }

# To display existing rules
 display() {
        $clu_file $word --display
    }

# To display help
help()
{
echo "
Usage: clu_$word <option> <rule>

Options:
-a|--add    <New-rule>          To add a new $word 
-d|--delete     <Existing-rule-number>      To delete an existing $word rule
-m|--modify     <rule number>:<new-rule>    To modify an existing $word rule
-D|--display                    To display all the existing rules
-h|--help                   To display help

Rule:   $word <target> <device> ethernet <MAC>
    $word <target> <device> bonding <if0> <if1>
    $word <target> <device>:<alias id> alias
    $word <target> <device>:<vlan id> vlan
        $word <target> <device> macvlan <if> [ <mac> ]
<target node>           <Node-number|control|payload|all>
<device>        Device name of interface
<mac>           Physical address of device. Eg. 23:F2:24:3e:a5:78
<if0> <if1>     Interfaces to bond together
<alias id>      Unique alias ID
<vlan id>       Unique VLAN ID (Maximum value allowed is 4095)
"
}


#Main


#pwd=`pwd`
fname="clu_parse"
clu_file="/opt/ap/apos/bin/clusterconf/$fname"
word="interface"

if [ -f /cluster/etc/cluster.conf ];then
        clu_Conf_path="/cluster/etc/"
        clu_Conf_file="cluster.conf"
else
        echo -e "\n/cluster/etc/cluster.conf file does not exists"
        exit 1
fi

if [ -f $clu_file ];then
	if [ -x $clu_file ];then
		ch=$1
		arg=$2
		arg3=$3
		shift 3
		arg4=$*
		case $ch in
			--add|-a)
				st="add"
				if [ $# -gt 4 ]; then
										echo "Illegal arguments"
										help
								else        
					add_mod word arg arg3 arg4 st
				fi
				;;
			--delete|-d)
				if [ $# -ne 2 ]; then
										echo "Illegal arguments"
										help
								else
					delete word arg
				fi
				;;
			--modify|-m)
				st="modify"
				if [ $# -gt 4 ]; then
										echo "Illegal arguments"
										help
								else
					add_mod word arg arg3 arg4 st
				fi
				;;
			--display|-D) 
				if [ $# -gt 1 ]; then
										echo "Illegal arguments"
										help
								else
					display
				fi 
				;;
			--help|-h)
				if [ $# -gt 1 ]; then
										echo "Illegal arguments"
										help
								else    
					 help
				fi
				;;
			*)  echo -e "\nWrong input format, please follow the below format...\n"
				help
				;;
		esac 
	else
		echo -e "\n$clu_file is not executable"
	fi
else
		echo -e "\n$clu_file file does not exists"
fi


