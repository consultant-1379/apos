#!/bin/bash
# Author: Satya Deepthi

# Funtions

# User-Input validations	

#validation for target
 validate_target() {
                        target=${!1}
                        if [ -z $target ] ; then
                                return 1
                        else
                        num=$( echo $target | grep -Eq "^[0-9]+$")
                        chk_num=$?
                                if [ $chk_num != 0 ] && [ $target != "control" ]&& [ $target != "payload" ] && [ $target != "all" ] ; then
                                return 1
                                fi
                        fi
                        echo $target
        }

# Validation for value of SSH
 validate_value() {
                        val=${!1}
                        if [ -z $val ] ; then
                                return 1
                        else
	                        if [ $val != "on" ]&& [ $val != "off" ] ; then
                	         return 1
        	                fi
                        fi
                        echo $val
        }

 validate_integer() {
                        rule=${!1}
                        if [ -z $rule ] ; then
                                return 1
                        else
                        num=$( echo $rule | grep -Eq "^[0-9]+$")
                        chk_num=$?
                                if [ $chk_num -eq 1 ] ; then
                                return 1
                                fi
                        fi
                        echo $rule
        }


# To add SSH rule
 add() {

	word=${!1}
        target=${!2}
        target_ip=`validate_target target`
        if [ $? -ne 0 ]
        then
                help
               echo "Target value should be either node number or node type (control/payload) or all. Empty values not accepted "
                exit 1
        fi

        val=${!3}
        val_ip=`validate_value val`
        if [ $? -ne 0 ]
        then
                help
        	echo "Value can be only on or off. Empty values not accepted."
                exit 1
        fi

	# Calling cluster_parse file to add Bonding rule
	rule="$word $target_ip $val_ip"
	chk_rule="$word $target_ip"
	$clu_file $word --add $rule $chk_rule
	#echo $?
	}		

# To delete an existing DNS rule
 delete() {
        word=${!1}
        rule=${!2}
        rule_num=`validate_integer rule`
        if [ $? -ne 0 ]
        then
                help
                echo "Enter rule number as argument. Empty values not accepted "
                exit 1
        fi

        # Calling cluster_parse file to delete boot rule
        $clu_file $word --delete $rule_num
	}

# To add/modify an existing rule
  add_mod() {
        word=${!1}
        arg=${!2}
        target=${!3}
        val=${!4}
        st=${!5}

	w1=$(echo $arg | cut -d : -f 2)
	if [ ! "$w1" == "$word" ]
	 then 	
		echo "Wrong format"
		help
		exit 1
	fi
        
	if [ $st == "modify" ]
	then 
		rule=$(echo $arg | cut -d: -f 1)
	        rule_num=`validate_integer rule`
	        if [ $? -ne 0 ]
        	then
                	help
	                echo "Enter correct format of arguments. "
        	        exit 1
	        fi
	fi

        target_ip=`validate_target target`
        if [ $? -ne 0 ]
        then
                help
               echo "Target value should be either node number or node type (control/payload) or all. Empty values not accepted "
                exit 1
        fi

        val_ip=`validate_value val`
        if [ $? -ne 0 ]
        then
                help
                echo "Value can be only on or off. Empty values not accepted."
                exit 1
        fi

        # Calling cluster_parse file to modify boot rule
	new_rule="$word $target_ip $val_ip"
	chk_rule="$word $target_ip"
	if [ $st == "modify" ]
	then 
        	$clu_file $word --modify $rule_num $new_rule $chk_rule
	else
		$clu_file $word --add $new_rule $chk_rule
	fi
        }

# To display existing DNS rules
 display() {
        $clu_file $word --display
	}

# To display help
help()
{
echo "
Usage: clu_$word <option> <rule>

Options:
-a|--add 	<New-rule>			To add a new $word rule 
-d|--delete 	<Existing-rule-number>		To delete an existing $word rule
-m|--modify 	<rule number>:<new-rule>	To modify an existing $word rule
-D|--display					To display all the existing rules
-h|--help					To display help

Rule: ssh.rootlogin <target> <value>
<target node>           <Node-number|control|payload|all>
<value> 		on|off
"
}


#Main


pwd=`pwd`
fname="clu_parse"
clu_file="/opt/ap/apos/bin/clusterconf/$fname"
word="ssh.rootlogin"

if [ -f /cluster/etc/cluster.conf ];then
        clu_Conf_path="/cluster/etc/"
        clu_Conf_file="cluster.conf"
else
        echo -e "\n/cluster/etc/cluster.conf file does not exists"
        exit 1
fi

        if [ -f $clu_file ];then
                if [ -x $clu_file ];then
                 ch=$1
		 arg=$2
		 arg3=$3
		 arg4=$4
		  case $ch in
			--add|-a)
				st="add"
				add_mod word arg arg3 arg4 st
		   	   	;;
			--delete|-d)  
				delete word arg
		   	   	;;
			--modify|-m)
				st="modify"
				add_mod word arg arg3 arg4 st
		   	   	;;
			--display|-D) display
		   	   	 ;;
			--help|-h) help
				 ;;
			*) 	echo -e "\nWrong input format, please follow the below format...\n"
				help
				;;
		  esac 
	else
                        echo -e "\n$clu_file is not executable"
                fi
        else
                echo -e "\n$clu_file file does not exists"
        fi

