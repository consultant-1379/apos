#!/bin/bash
# Author: Satya Deepthi

# Changelog:
# - Fri 16 May 2014 - Fabrizio Paglia (XFABPAG)
#	Removed unused functions, variables and commented old code
# - Fri 9 May 2014 - Torgny Wilhelmsson (XTORWIL)
#       Cableless bonding configuration changed from 'arp' to 'arp_ip_target', to align with cluster template file
# - Tue 6 May 2014 - Torgny Wilhelmsson (XTORWIL)
#       Update for Cable less configuration 
#       Fixed up use of more than one bonded interface
#       Allowed arp_interval to be set
#       Allowed only one arp target to be used for monitoring
# Updated by XPRANSI
# Date: 27-10-2011

exit_failure=1

# Funtions

# User-Input validations    

#validation for ip address
 validate_ip() {
        ip_format="\b(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\b"
        ipaddr=${!1}
        chk=$(echo $ipaddr | egrep $ip_format)
        if [ $? -ne 0 ]
            then return 1
        fi
        echo $ipaddr
}

#validation for target
 validate_targetS() {
    target=$1
    if [ -z $target ] ; then
            return 1
    else
        num=$( echo $target | grep -Eq "^[0-9]+$")
        chk_num=$?
        if [ $chk_num != 0 ] && [ $target != "control" ]&& [ $target != "payload" ] && [ $target != "all" ] ; then
            return 1
        fi
    fi
    return 0
}

validate_interface_only() {
        interface=$1

        if [ -z $interface ] ; then
                return 1
        else
            #check whether the interface exists for the target given as input
            clu_int=$( cat /cluster/etc/cluster.conf | grep ^interface | grep "$interface bonding" | awk '{print $3}')
            if [ "$clu_int" != "$interface" ] ; then
                return 1
            fi
        fi
        return 0
}

#validation for rule number
 validate_integer() {
                        rule=${!1}
                        if [ -z $rule ] ; then
                                return 1
                        else
                        num=$( echo $rule | grep -Eq "^[0-9]+$")
                        chk_num=$?
                                if [ $chk_num -eq 1 ] ; then
                                return 1
                                fi
                        fi
                        echo $rule
}


# To delete an existing rule
 delete() {
        word=${!1}
        rule=${!2}
        rule_num=`validate_integer rule`
        if [ $? -ne 0 ]
        then
                help
                echo "Enter rule number as argument. Empty values not accepted "
                exit 1
        fi

        # Calling cluster_parse file to delete bonding rule
        $clu_file $word --delete $rule_num
}

# To add/modify rules
  add_mod() {
    word=${!1}
    arg=${!2}
    target=${!3}
    interface=${!4}
    parameter=${!5}
    param_value=${!6}
    cnt=${!7}
    status=${!8}

    rule=""
        
    w1=$(echo $arg | cut -d : -f 2)
    if [ ! "$w1" == "$word" ]
     then   
        echo "Wrong format"
        help
        exit 1
    fi
        
    if [ $status == "modify" ]
     then
        rule=$(echo $arg | cut -d: -f 1)
            rule_num=`validate_integer rule`
            if [ $? -ne 0 ]
            then
                    help
                    echo "Enter correct format of arguments. "
                    exit 1
            fi
    fi

    validate_targetS "$target"
    if [ $? -ne 0 ] ; then
        help
        echo "Target value should be either node number, node type (control/payload) or all. Empty values not accepted "
        exit 1
    fi

        validate_interface_only "$interface"
        if [ $? -ne 0 ]
        then
                help
                echo "Interface name should match with existing interfaces for the target. Empty values not accepted."
                exit $exit_failure
        fi

    case $parameter in
    
        arp_interval)
            numeralsonly=$(echo $param_value | grep -Eq "^[0-9]+$") 
            if [ $? -ne 0 ] ; then
                echo "arp_interval invalid" 
                exit $exit_failure
            fi
            rule="$word $target $interface  $parameter $param_value"
            chk_rule="$word $target $interface $parameter"
            ;;
        
        arp|arp_ip_target)
            if [ "$cnt" -lt 1 ] ; then
                    echo "At least 1 IP address must be given"
                    exit $exit_failure
            fi

            for i in $( seq 1 $cnt)
            do
                    ip=$( echo $param_value | cut -d ' ' -f $i)
                    ipaddr_ip=`validate_ip ip`
                    if [ $? -ne 0 ]
                    then
                            help
                            echo "IP address should be of correct format. Empty values not accepted "
                            exit 1
                    fi
            done
	    if [ $parameter == "arp" ] ; then
                rule="$word $target $interface arp $param_value"
	    else
                rule="$word $target $interface arp_ip_target $param_value"
	    fi
            chk_rule="$word $target $interface $parameter"
            ;;
        *)
                echo "Invalid bonding parameter given"
                exit 1
            ;;
        esac

    if [ $status == "modify" ] ; then
        $clu_file $word --modify $rule_num $rule $chk_rule
    else
        $clu_file $word --add $rule $chk_rule
    fi
 }

# To display existing rules
 display() {
        $clu_file $word --display
}

# To display help
help() {
    echo "
    Usage: clu_$word <option> <rule>

    Options:
    -a|--add        <New-rule>                  To add a new $word rule 
    -d|--delete     <Existing-rule-number>      To delete an existing $word rule
    -m|--modify     <rule number>:<new-rule>    To modify an existing $word rule
    -D|--display                                To display all the existing rules
    -h|--help                                   To display help

    Rule: $word <target> <interface> arp <IP address 1> ... <IP address n>
          $word <target> <interface> arp_interval <arp_interval value> 
    <target>                <Node-number|control|payload|all>
    <interface>             Bonded interface Eg. bond0, bond1, etc
    <arp_interval value>    Specifies the ARP link monitoring frequency in milliseconds.
    <IP address>            IP address(es) of ARP target(s). IPv4 addresses are accepted only. Eg. 172.16.67.45
"
}



#################################### Main ####################################


pwd=`pwd`
fname="clu_parse"
clu_file="/opt/ap/apos/bin/clusterconf/$fname"
word="bonding"

if [ -f /cluster/etc/cluster.conf ];then
        clu_Conf_path="/cluster/etc/"
        clu_Conf_file="cluster.conf"
else
        echo -e "\n/cluster/etc/cluster.conf file does not exists"
        exit 1
fi

if [ -f $clu_file ];then
    if [ -x $clu_file ];then
        ch=$1
        arg=$2
        arg3=$3
        arg4=$4
        arg5=$5
        case $ch in
            --add|-a)
                st="add"
                cnt=$(( $# - 5 ))
                shift 5
                ip=$*
                add_mod word arg arg3 arg4 arg5 ip cnt st
            ;;
            --delete|-d)  
                if [ $# -gt 2 ]; then
                    echo "Illegal arguments"
                    help
                else
                    delete word arg
                fi
            ;;
            --modify|-m)
                st="modify"
                cnt=$(( $# - 5 ))
                shift 5
                ip=$*
                add_mod word arg arg3 arg4 arg5 ip cnt st
            ;;
            --display|-D) 
                if [ $# -gt 1 ]; then
                                        echo "Illegal arguments"
                                        help
                                else
                    display
                fi
            ;;
            --help|-h) 
                if [ $# -gt 1 ]; then
                                        echo "Illegal arguments"
                                        help
                                else
                    help
                fi
            ;;
            *)
                echo -e "\nWrong input format, please follow the below format...\n"
                help
            ;;
        esac 
    else
        echo -e "\n$clu_file is not executable"
    fi
else
    echo -e "\n$clu_file file does not exists"
fi

##############################################################################
### END OF SCRIPT ############################################################
##############################################################################
