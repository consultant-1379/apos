#!/bin/bash
##
# ------------------------------------------------------------------------
#     Copyright (C) 2020 Ericsson AB. All rights reserved.
# ------------------------------------------------------------------------
##
# Name:
#       clu_mip.sh
#
# Description:
#  This is an internal command invoked from clusterconf tool.
#  This command is used to validate the input parameters passed to the cluster commands
##
# Author: Satya Deepthi
#
# Changelog:
# - Wed Feb 5 2020 - Yeswanth Vankayala (xyesvan)
#    IPv6 Impacts for clu command
# - Thu Oct 27 2011 - Pranshu Sinha (XPRANSI)

# Load the common functions.
. /opt/ap/apos/bin/clusterconf/clu_sc


# validation for interface
validate_interface() {
  interface=${!1}
  if [ -z "$interface" ] ; then
    return 1 
  else
    flg=0
    # Only Interfaces that exist can be given
    for i in $(cat $clu_Conf_path$clu_Conf_file | grep ^interface | awk '{print $3}' | sort -n | uniq)
    do
      [ "$i" == "$interface" ] && flg=1
    done
    [ $flg == 0 ] && return 1
  fi
  echo $interface
}

# Validation for network
validate_network() {
  network=${!1}
  if [ -z "$network" ] ; then
    return 1
  else
    flg=0
    for i in $(cat $clu_Conf_path$clu_Conf_file | grep ^network | cut -d ' ' -f 2)
    do
      [ "$i" == "$network" ] && flg=1 
    done
    [ $flg == 0 ] && return 1
  fi
  echo $network
}


# To delete an existing IP rule
delete() {
  word=${!1}
  rule=${!2}
  rule_num=$(validate_integer rule)
  if [ $? -ne 0 ]; then
    help
    echo "Enter rule number as argument. Empty values not accepted "
    exit 1
  fi

  # Calling cluster_parse file to delete rule
  $clu_file $word --delete $rule_num
}

# To add/modify an existing MIP rule
add_mod() {
  word=${!1}
  arg=${!2}
  target=${!3}
  name=${!4}
  interface=${!5}
  network=${!6}
  ip=${!7}
  st=${!8}

  w1=$(echo $arg | cut -d : -f 2)
  if [ ! "$w1" == "$word" ]; then
    echo "Wrong format"
    help
    exit 1
  fi

  if [ $st == "modify" ]; then
    rule=$(echo $arg | cut -d: -f 1)
    rule_num=$(validate_integer rule)
    if [ $? -ne 0 ]; then
      help
      echo "Enter correct format of arguments. "
      exit 1
    fi
  fi

  validate_node $target
  if [ $? -ne 0 ]; then
    help
    echo "Target value should be either node number or node type (control/payload) or all. Empty values not accepted "
    exit 1
  fi

  interface_ip=$(validate_interface interface)
  if [ $? -ne 0 ]; then
    help
    echo "Interface name should match with existing interfaces. Empty values not accepted."
    exit 1
  fi
 
  nw_ip=$(validate_network network)
  if [ $? -ne 0 ]; then
    help
    echo "Network name should match with existing network names. Empty values not accepted."
    exit 1
  fi

  validate_ip $ip
  if [ $? -ne 0 ]; then
    help
    echo "IP address should be of IPv4 or IPv6 address format. Empty values not accepted."
    exit 1
  fi

  name_ip=$(validate_name name)
  if [ $? -ne 0 ]; then
    help
    echo "Empty values not accepted for name"
    exit 1
  fi
  # Calling cluster_parse file to add/modify MIP rule
  rule="$word $target $name_ip $interface_ip $nw_ip $ip"
  chk_rule="$word $target $name_ip"
  if [ $st == "modify" ]; then
    $clu_file $word --modify $rule_num $rule $chk_rule
  else
    $clu_file $word --add $rule $chk_rule
  fi
}

# To display existing rules
display() {
  $clu_file $word --display
}

# To display help
help(){
echo "
Usage: clu_$word <option> <rule>

Options:
-a|--add        <New-rule>                      To add a new $word rule
-d|--delete     <Existing-rule-number>          To delete an existing $word rule
-m|--modify     <rule number>:<new-rule>        To modify an existing $word rule
-D|--display                                    To display all the existing rules
-h|--help                                       To display help

Rule: $word <target> <name> <interface> <network> <IP address>
<target node>           <Node-number|control|payload|all>
<name>                  Symbolic name to be associated with movable IP address
<interface>             Interface the IP address should be assigned to
<network>               Network the IP address belongs to
<IP address>            Eg. 172.16.67.45, 2010:ae24:123e::1 
"
}

#Main
pwd=`pwd`
fname="clu_parse"
clu_file="/opt/ap/apos/bin/clusterconf/$fname"
word="mip"

if [ -f /cluster/etc/cluster.conf ]; then
  clu_Conf_path="/cluster/etc/"
  clu_Conf_file="cluster.conf"
else
  echo -e "\n/cluster/etc/cluster.conf file does not exists"
  exit 1
fi

if [ -f "$clu_file" ]; then
  if [ -x "$clu_file" ]; then
    ch=$1
    arg=$2
    arg3=$3
    arg4=$4
    arg5=$5
    arg6=$6
    arg7=$7
    case $ch in
      --add|-a)
              st="add"
              if [ $# -gt 7 ]; then
                echo "Illegal arguments"
                help
              else
                add_mod word arg arg3 arg4 arg5 arg6 arg7 st
              fi
              ;;
      --delete|-d)
                  if [ $# -gt 2 ]; then
                    echo "Illegal arguments"
                    help
                  else
                    delete word arg
                  fi
                  ;;
      --modify|-m)
                  st="modify"
                  if [ $# -gt 7 ]; then
                    echo "Illegal arguments"
                    help
                  else
                    add_mod word arg arg3 arg4 arg5 arg6 arg7 st
                  fi
                  ;;
      --display|-D) 
                  if [ $# -gt 1 ]; then
                     echo "Illegal arguments"
                     help
                  else
                     display
                  fi
                  ;;
      --help|-h) 
                if [ $# -gt 1 ]; then
                  echo "Illegal arguments"
                  help
                else
                  help
                fi
                ;;
      *) echo -e "\nWrong input format, please follow the below format...\n"
         help
         ;;
    esac
  else
    echo -e "\n$clu_file is not executable"
  fi
else
  echo -e "\n$clu_file file does not exists"
fi

