#!/bin/bash
# Author: Satya Deepthi

# Changelog
# Updated by XPRANSI
# Date: 27-10-2011

# Functions

# User-Input validations	

#validation for ip address
 validate_ip() {
		ip_format="\b(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\b"
		ipaddr=${!1}
		chk=$(echo $ipaddr | egrep $ip_format)
		if [ $? -ne 0 ]
			then return 1
		fi
		echo $ipaddr
	}

#validation for target
 validate_target() {
                        target=${!1}
                        if [ -z $target ] ; then
                                return 1
                        else
                        num=$( echo $target | grep -Eq "^[0-9]+$")
                        chk_num=$?
                                if [ $chk_num != 0 ] && [ $target != "control" ]&& [ $target != "payload" ] && [ $target != "all" ] ; then
                                return 1
                                fi
                        fi
                        echo $target
        }

#validation for interface
 validate_interface() {
                        interface=${!1}
                        target=${!2}
                        if [ -z $interface ] ; then
                                return 1
                        else
                        flg=0
        # Interfaces defined for that particular node only can be given
                        for i in $(cat $clu_Conf_path$clu_Conf_file | grep ^"interface $target" | cut -d ' ' -f 3)
                        do
                         if [ $i == $interface ]
                         then flg=1
                         fi
                        done
                                if [ $flg == 0 ]
                                then return 1
                                fi
                        fi
                        echo $interface
        }

#validation for MAC address
 validate_mac()	{
		mac=${!1}
                mac_format="([0-9a-fA-F]{2}\:){5}[0-9a-fA-f]{2}"
                chk=$(echo $mac | egrep ^$mac_format$)
#               echo $mac | egrep "^([0-9a-fA-F]{2}\:){5}[0-9a-fA-F]{2}$"
                if [ $? -ne 0 -a "$mac" != "auto" ]
                        then return 1
                fi
                echo $mac
	}

 validate_integer() {
                        threshold=${!1}
                        if [ -z $threshold ] ; then
                                return 1
                        else
                        num=$( echo $threshold | grep -Eq "^[0-9]+$")
                        chk_num=$?
                                if [ $chk_num -eq 1 ] ; then
                                return 1
                                fi
                        fi
                        echo $threshold
        }

# To delete an existing boot rule
 delete() {
        word=${!1}
        rule=${!2}
        rule_num=`validate_integer rule`
        if [ $? -ne 0 ]
        then
                help
                echo "Enter rule number as argument. Empty values not accepted "
                exit 1
        fi

        # Calling cluster_parse file to delete boot rule
        $clu_file $word --delete $rule_num
	}

# To add/modify an existing rule
  add_mod() {
        word=${!1}
        arg=${!2}
        st=${!8}
        w1=$(echo $arg | cut -d : -f 2)
        if [ "$w1" != "$word" ]
         then
                echo "Wrong format"
                help
                exit 1
        fi

	if [ $st == "modify" ]
	then 
	        rule=$(echo $arg | cut -d: -f 1)
        	rule_num=`validate_integer rule`
	        if [ $? -ne 0 ]
	        then
        	        help
                	echo "Enter correct format of arguments. "
	                exit 1
        	fi
	fi

        target=${!3}
        target_new=`validate_target target`
        if [ $? -ne 0 ]
        then
                help
               echo "Target value should be either node number or node type (control/payload) or all. Empty values not accepted "
                exit 1
        fi

        interface=${!4}
        interface_ip=`validate_interface interface target_ip`
        if [ $? -ne 0 ]
        then
                help
                echo "Interface name should match with existing interfaces for the target. Empty values not accepted."
                exit 1
        fi

        ipaddr_new=${!5}
        ipaddr_ip_new=`validate_ip ipaddr_new`
        if [ $? -ne 0 ]
        then
                help
                echo "IP address should be of the format 172.16.67.45 Empty values not accepted "
                exit 1
        fi

        port=${!6}
        port_num=`validate_integer port`
        if [ $? -ne 0 ]
        then
                help
                echo "Enter integer value for port number. Empty values not accepted "
                exit 1
        fi
	if [ $mac_flag == 0 ]
	then
        	mac=${!7}
	        mac_ip=`validate_mac mac`
	        if [ $? -ne 0 ]
        	then
                	help
	                echo "Enter correct MAC value."
        	        exit 1
	        fi	
	fi

        # Calling cluster_parse file to modify boot rule
        rule="netconsole $target_new $interface_ip $ipaddr_ip_new $port_num $mac_ip"
	chk_rule="netconsole $target_new"
	if [ $st == "modify" ]
	then 
        	$clu_file $word --modify $rule_num $rule $chk_rule
	else
		$clu_file $word --add $rule $chk_rule
	fi
        }

# To display existing alarm rules
 display() {
        $clu_file $word --display
	}

# To display help
help()
{
echo "
Usage: clu_netconsole <option> <rule>

Options:
-a|--add 	<New-rule>			To add a new netconsole rule 
-d|--delete 	<Existing-rule-number>		To delete an existing netconsole rule
-m|--modify 	<rule number>:<new-rule>	To modify an existing netconsole rule
-D|--display					To display all the existing rules
-h|--help					To display help

Rule: netconsole <target> <interface> <destination address> <destination port> <destination MAC>
<target node>           <Node-number|control|payload|all>
<interface>		Eg. eth0,eth1,eth2
<destination address> 	Eg. 172.16.67.45
<port>			Port number
<MAC>			Eg. 23:F2:24:3e:a5:78
"
}


#Main


pwd=`pwd`
fname="clu_parse"
clu_file="/opt/ap/apos/bin/clusterconf/$fname"
word="netconsole"

if [ -f /cluster/etc/cluster.conf ];then
        clu_Conf_path="/cluster/etc/"
        clu_Conf_file="cluster.conf"
else
        echo -e "\n/cluster/etc/cluster.conf file does not exists"
        exit 1
fi

        if [ -f $clu_file ];then
                if [ -x $clu_file ];then
                 ch=$1
		 arg=$2
		 arg3=$3
		 arg4=$4
		 arg5=$5
		 arg6=$6
		 arg7=$7
		 mac_flag=0
		if [ -z $arg7 ]
		then mac_flag=1
		fi
		  case $ch in
			--add|-a)
				st="add"
				add_mod word arg arg3 arg4 arg5 arg6 arg7 st mac_flag
		   	   	;;
			--delete|-d)
				if [ $# -gt 2 ]; then
                                        echo "Illegal arguments"
                                        help
                                else  
					delete word arg
		   	   	fi
				;;
			--modify|-m)
				st="modify"
				add_mod word arg arg3 arg4 arg5 arg6 arg7 st mac_flag
		   	   	;;
			--display|-D) 
				if [ $# -gt 1 ]; then
                                        echo "Illegal arguments"
                                        help
                                else
					display
		   	   	fi
				;;
			--help|-h) 
				if [ $# -gt 1 ]; then
                                        echo "Illegal arguments"
                                        help
                                else
					help
				fi
				;;
			*) 	echo -e "\nWrong input format, please follow the below format...\n"
				help
				;;
		  esac 
	else
                        echo -e "\n$clu_file is not executable"
                fi
        else
                echo -e "\n$clu_file file does not exists"
        fi

